---
---
# Single-node Ansible playbook to install k3s (server)
# Designed to be used with ansible-pull from the terraform module's runner.

- hosts: localhost
  connection: local
  become: true
  vars:
    # k3s_version: explicit version string like 'v1.27.4+k3s1' or 'latest'
    # When set to 'latest' the installer will install the latest channel release.
    k3s_version: "latest"
    k3s_channel: "stable"
    # Optional token for cluster joins; not required for single-node server
    k3s_token: ""
    install_method: "script"

  pre_tasks:
    - name: Ensure required packages are installed
      apt:
        name:
          - curl
          - iproute2
        state: present
        update_cache: yes

    - name: Detect if k3s binary exists
      stat:
        path: /usr/local/bin/k3s
      register: k3s_bin

    - name: Gather installed k3s version if present
      when: k3s_bin.stat.exists
      shell: /usr/local/bin/k3s --version
      register: k3s_version_out
      changed_when: false
      failed_when: false

    - name: Set installed_k3s_version fact
      set_fact:
        installed_k3s_version: "{{ (k3s_version_out.stdout | default('')) | regex_search('v[0-9.+-]+', '\\0') | default('') }}"

  tasks:
    - name: Install k3s via official install script (server)
      when: install_method == 'script' and (installed_k3s_version == '' or (k3s_version != 'latest' and installed_k3s_version != k3s_version))
      shell: |
        set -euo pipefail
        curl -sfL https://get.k3s.io | INSTALL_K3S_CHANNEL={{ k3s_channel }} {{ 'INSTALL_K3S_VERSION=' + k3s_version if k3s_version != 'latest' else '' }} INSTALL_K3S_EXEC='--disable=traefik' sh -s - --write-kubeconfig-mode 644 {{ ('K3S_TOKEN=' + k3s_token) if k3s_token != '' else '' }}
      args:
        executable: /bin/bash

    - name: Skip install if desired version is already installed
      when: installed_k3s_version != '' and k3s_version != 'latest' and installed_k3s_version == k3s_version
      debug:
        msg: "k3s {{ installed_k3s_version }} already installed, skipping installation"

    - name: Ensure k3s service is enabled and started
      systemd:
        name: k3s
        enabled: yes
        state: started

    - name: Wait for kubeconfig to exist
      wait_for:
        path: /etc/rancher/k3s/k3s.yaml
        timeout: 30

    - name: Ensure kubectl (k3s kubectl) is callable via /usr/local/bin/kubectl
      file:
        src: /usr/local/bin/k3s
        dest: /usr/local/bin/kubectl
        state: link

    - name: Print server token for debugging
      shell: |
        cat /var/lib/rancher/k3s/server/node-token || true
      register: join_info
      changed_when: false

    - name: Show join info debug
      debug:
        var: join_info.stdout_lines
